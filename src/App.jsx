import { useEffect, useState } from 'react';
import ToDoList from './components/ToDoList';
import AddTodoForm from './components/AddTodoForm';
import axios from 'axios';

const App = () => {
  const [tasks, setTasks] = useState([]);
  const incompleteTasks = tasks.filter(task => !task.completed).length; // Compteur de tÃ¢ches incomplÃ¨tes
  const [filterPriority, setFilterPriority] = useState("toutes"); // Ajout du filtre
  const [darkMode, setDarkMode] = useState(false); // Ã‰tat du mode sombre

  //Charger les tÃ¢ches Ã  l'initialisation du composant
  useEffect(() => {
    axios
      .get("http://localhost:5000/tasks")
      .then((response) => setTasks(response.data))
      .catch((error) => console.error("Error de rÃ©cupÃ©ration des tÃ¢ches :", error));
  }, []);

  //Ajouter une tÃ¢che
  const handleAddTask = (title, priority) => {
    const newTask = { title, completed: false, priority }; //CrÃ©ation de la nouvelle tÃ¢che
    axios
      .post("http://localhost:5000/tasks", newTask)
      .then((response) => setTasks([...tasks, response.data])) //Mise Ã  jour de l'Ã©tat
      .catch((error) => console.error("Error de l'ajout d'une tÃ¢che :", error));
  }

  const handleToggleTask = (id) => {
    const task = tasks.find((task) => task.id === id);
    const updatedTask = { ...task, completed: !task.completed };
    axios
      .put(`http://localhost:5000/tasks/${id}`, updatedTask)
      .then(() => setTasks(tasks.map((t) => (t.id === id ? updatedTask : t))))
      .catch((error) => console.error("Error lors de la mise Ã  jour de la tÃ¢che : ", error));
  }

  const handleOnDelete = (id) => {
    axios
      .delete(`http://localhost:5000/tasks/${id}`)
      .then(() => setTasks(tasks.filter((task) => task.id !== id))) // Mise Ã  jour de l'Ã©tat
      .catch((error) => console.error("Erreur lors de la suppression de la tÃ¢che :", error));
  };

  // Filtrer les tÃ¢ches en fonction de la prioritÃ© sÃ©lectionnÃ©e
  const filteredTasks = filterPriority === "toutes" ? tasks : tasks.filter(task => task.priority === filterPriority);

  const toggleTheme = () => {
    setDarkMode(!darkMode);
  };

  return (
    <div className={darkMode ? "dark-mode" : "light-mode"}>
      <button className="theme-toggle" onClick={toggleTheme}>
        {darkMode ? "â˜€ Mode Clair" : "ğŸŒ™ Mode Sombre"}
      </button>
      <h1>ToDoList</h1>
      <p>ğŸ“Œ TÃ¢ches restantes : {incompleteTasks}</p> {/* Affichage du compteur */}
      <AddTodoForm onAddTask={handleAddTask} />
      <label>Filtrer par prioritÃ© : </label>
      <select value={filterPriority} onChange={(e) => setFilterPriority(e.target.value)}>
        <option value="toutes">Toutes</option>
        <option value="basse">Basse</option>
        <option value="moyenne">Moyenne</option>
        <option value="haute">Haute</option>
      </select>
      <ToDoList tasks={filteredTasks} onToggle={handleToggleTask} onDelete={handleOnDelete} />
    </div>
  )
};

export default App;
